package JOMP;

import Algorithm_Ops.Circle;
import Algorithm_Ops.CircleOps;
import Algorithm_Ops.ScanGeometry;
import Dataset.Events;
import Dataset.GridFile;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

/**
 * Created by guroosh on 8/4/17.
 */
public class naiveJOMP {
    public Circle circles[];
    public long circle_count;
    public int added_circles = 0;

    public void naiveTesterJOMP(GridFile gridFile, double minLon, double minLat, double maxLon, double maxLat) throws Exception {
        double likelihood_threshold = 0;
        double curr_radius = 0.001;
        double initial_radius = curr_radius;
        double term_radius = 0.01;
        double shift_radius = 0.001;
        double growth_radius = 0.001;
        int number_of_radius = 10;       //By formula: number  <=  ((t-c)/g) + 1

        int lat_circles = (int) ((maxLat - minLat) / shift_radius) + 1;
        int lon_circles = (int) ((maxLon - minLon) / shift_radius) + 1;
        int assumed_number_of_circles = lat_circles * lon_circles * number_of_radius;

        circles = new Circle[assumed_number_of_circles];

        ScanGeometry area = new ScanGeometry(minLon, minLat, maxLon, maxLat);
        CircleOps controller = new CircleOps(initial_radius, term_radius, area, gridFile);
//        System.out.println(curr_circle.toString());

        int i;
        //omp parallel shared(i)
        {
            //omp for
            for (i = 0; i < number_of_radius; i++) {

                double[] curr_local_radius = {initial_radius + (growth_radius * i)};
                Circle[] curr_local_circle = {new Circle(minLon, minLat, curr_local_radius[0])};

//                    System.out.println(curr_local_radius[0]);
//                    System.out.println(curr_local_circle[0].toString());
//                    System.out.println();
                while (controller.term(curr_local_circle[0]) != -1) {
                    while (controller.term(curr_local_circle[0]) == 0) {
                        //omp critical one
                        {
                            circle_count++;
                        }
//                            System.out.print(finalI);
//                            System.out.print(naive_counter + " : " + curr_circle.toString());
                        Events points[] = controller.scanCircle(curr_local_circle[0]).toArray(new Events[0]);

                        double likelihood_ratio = controller.likelihoodRatio(curr_local_circle[0], points);
                        if (likelihood_ratio > likelihood_threshold) {            //(likelihood_ratio > 2000) {
                            //Starting for visualization
                            Circle temp_circle = new Circle(curr_local_circle[0].getX_coord(), curr_local_circle[0].getY_coord(), curr_local_circle[0].getRadius());
                            temp_circle.lhr = likelihood_ratio;
                            //Ending for visualization
                            //omp critical two
                            {
                                circles[added_circles] = temp_circle;
                                added_circles++;
                            }
                        }
                        curr_local_circle[0] = controller.grow_x(shift_radius, curr_local_circle[0]);
                    }
                    curr_local_circle[0] = controller.shift(curr_local_circle[0], -1, shift_radius);
                }

            }
        }
        //omp barrier
    }
}
