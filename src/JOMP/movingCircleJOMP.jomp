package JOMP;

import Algorithm_Ops.Circle;
import Algorithm_Ops.CircleOps;
import Algorithm_Ops.ScanGeometry;
import Dataset.Events;
import Dataset.GridFile;
import Moving_Circle.MovingCircle;
import TestingAlgo.Values;

import java.util.Arrays;

/**
 * Created by guroosh on 8/4/17.
 */
public class movingCircleJOMP {
    int added_circles = 0;
    public Circle[] movingCircleTesterJOMP(int runtime, GridFile gridFile, double minLon, double minLat, double maxLon, double maxLat) throws Exception {
        Circle[] core_circles = new Circle[runtime];
        int i;
        //omp parallel shared(i)
        {
            //omp for
            for (i = 0; i < runtime; i++) {
                movingCircleTester3(core_circles, gridFile, minLon, minLat, maxLon, maxLat);

            }
        }
        //omp barrier
        return core_circles;
    }

    private void movingCircleTester3(Circle[] core_circles, GridFile gridFile, double minLon, double minLat, double maxLon, double maxLat) throws Exception {
        int circlecounter = Values.moving_circle_counter;
        double curr_radius = Values.lower_limit;
        double term_radius = Values.terminating_radius;
        double growth = Values.growth_rate;
        double upper_limit = Values.upper_limit;

        ScanGeometry area = new ScanGeometry(minLon, minLat, maxLon, maxLat);

        Circle curr_circle = new Circle("Random", curr_radius, area);
        Circle next_circle;
        Circle temp_circle = new Circle(curr_circle);

        CircleOps controller = new CircleOps(curr_radius, term_radius, area, gridFile);

        double maxlikeli = -1;
        Circle fin_circle = null;
        Events points[] = controller.scanCircle(curr_circle).toArray(new Events[0]);
        while (controller.term(curr_circle) != 3) {


            next_circle = controller.checkanglepoints(curr_circle, points);

            Events[] points1 = controller.scanCircle(next_circle).toArray(new Events[0]);

            double curr_likeli = controller.likelihoodRatio(curr_circle, points);
            double next_likeli = controller.likelihoodRatio(next_circle, points1);

            if (curr_likeli < next_likeli) {
                if (next_likeli > maxlikeli) {
                    maxlikeli = next_likeli;
                    fin_circle = new Circle(next_circle);
                }
                curr_circle = new Circle(next_circle);
                points = Arrays.copyOf(points1, points1.length);
            } else {
                if (curr_likeli > maxlikeli) {
                    if (curr_circle.getRadius() <= upper_limit) {
                        maxlikeli = curr_likeli;
                        fin_circle = new Circle(curr_circle);
                    }
                }
                curr_circle = controller.grow_radius(growth, curr_circle);
                points = controller.scanCircle(curr_circle).toArray(new Events[0]);
            }

            if (circlecounter == 1) {
                if (fin_circle != null) {
                    Circle finalFin_circle = fin_circle;
                    fin_circle.lhr = maxlikeli;
                    //omp critical three
                    {
                        controller.removePoints(controller.scanCircle(finalFin_circle));
                        core_circles[added_circles] = finalFin_circle;
                        added_circles++;
                    }
                }
                return;
            }
            circlecounter--;
        }
    }
}
